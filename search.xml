<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/en/2024/06/09/Baoji-Chengdu-Railway-North/"/>
      <url>/en/2024/06/09/Baoji-Chengdu-Railway-North/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/en/2024/06/09/lakeblue-double-decker/"/>
      <url>/en/2024/06/09/lakeblue-double-decker/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/en/2024/06/09/last-Z/"/>
      <url>/en/2024/06/09/last-Z/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/en/2024/06/09/longhai/"/>
      <url>/en/2024/06/09/longhai/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/en/2024/06/09/original-liveries-2024-spring/"/>
      <url>/en/2024/06/09/original-liveries-2024-spring/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/en/2024/06/09/shangluo-2023/"/>
      <url>/en/2024/06/09/shangluo-2023/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客创建记录</title>
      <link href="/en/2024/06/02/makeRecord/"/>
      <url>/en/2024/06/02/makeRecord/</url>
      
        <content type="html"><![CDATA[<p>今天发现新浪博客几乎已经是强弩之末了，加之学校不少人有创建类似的博客，于是心血来潮自己搭一个。</p><p>主要基于<a href="https://www.jianshu.com/p/4eaddcbe4d12">“简书”上的有关教程</a>和<a href="https://pdpeng.github.io/2022/01/19/setup-personal-blog/">另一个博客网站所有者的教程</a>操作。</p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>首先生成了一个名为<code>k-pk66.github.io</code>的库。这个库的名称是GitHub账号的用户名。生成之后将主Branch更名为<code>master</code>，并通过<code>Settings&gt;Pages&gt;Build and Deployment</code>将Branch设定为了<code>master</code>。</p><h2 id="终端（Terminal）"><a href="#终端（Terminal）" class="headerlink" title="终端（Terminal）"></a>终端（Terminal）</h2><p>通过homebrew为macOS安装git和nvm。后者是Nodejs版本管理器，可以轻松切换Nodejs版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br><span class="line">brew install nvm</span><br><span class="line"><span class="built_in">mkdir</span> ~/.nvm</span><br><span class="line"><span class="built_in">export</span> NVM_DIR=~/.nvm</span><br><span class="line">(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></table></figure><p>之后运用<code>nvm</code>安装Node.js。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 4</span><br></pre></td></tr></table></figure><p>随后通过<code>npm</code>安装hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>在此之后，创建名为<code>k-pk66.github.io</code>的文件夹并通过命令行打开。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init k-pk66.github.io</span><br><span class="line"><span class="built_in">cd</span> k-pk66.github.io</span><br></pre></td></tr></table></figure><p>文件夹中有名为<code>_config.yml</code>的配置文件；将该文件中的各键值对按<a href="https://hexo.io/zh-cn/docs/configuration.html">官方提供的指引文档</a>进行修改即可。由于设定的博客位于GitHub，因此需要对文件中的“部署（<code>deploy</code>）”区域进行如下设置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">http://github.com/k-pk66/k-pk66.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>文件夹所属<code>sources</code>文件夹的<code>_post</code>中有参考性质的Markdown文件。通过下方指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;makeRecord&quot;</span></span><br></pre></td></tr></table></figure><p>创建新的博客。</p><p>（更多撰写指引，请看<a href="https://hexo.io/docs/writing.html">这里</a>）</p><p>之后通过指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>对博客网页在<a href="http://localhost:4000/">本地</a>进行测试。</p><p>随后通过指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装自动部署发布工具。此后，每次更新博客只要输入指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>即可完成上传。</p><h2 id="GitHub的身份验证"><a href="#GitHub的身份验证" class="headerlink" title="GitHub的身份验证"></a>GitHub的身份验证</h2><p>在首次输入上一章节的最后一个指令时命令行会引导输入GitHub账密。用户名与GitHub一致即可；当输入密码与正常登录所使用的密码一致时命令行将报错。<br>报错信息为“GitHub自2021年8月13日起不再支持密码认证”；因此需要通过GitHub账户个人设置中的开发者设置生成权限密钥（Personal access tokens）。在生成之后将输入密码替代为此token，即可完成上传。</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>在本博客发布为止博客使用的是butterfly主题。</p><p>在文件夹<code>k-pk66.github.io</code>的终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>安装完成后<code>themes</code>文件夹即新增了butterfly主题的一部分文件。随后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>安装渲染器等插件。最后在<code>_config.yml</code>文件中修改<code>theme</code>键值为<code>butterfly</code>，再进行测试即可查看效果。</p><h2 id="Troubleshoot"><a href="#Troubleshoot" class="headerlink" title="Troubleshoot"></a>Troubleshoot</h2><p>后续在实际撰稿过程中遇到了一些问题，在这里列举。</p><h3 id="过大文件"><a href="#过大文件" class="headerlink" title="过大文件"></a>过大文件</h3><p>由于GitHub本身对上传的单个文件空间大小有要求（不得超过100MB），因此不建议上传视频。</p><p>如误上传了超过100MB的文件，命令行会在push时返回信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.</span><br></pre></td></tr></table></figure><p>在稿件中对应位置移除该大文件后push，依然会有此报错。解决此问题，需要在<code>.deploy_git</code>文件夹中打开命令行，输入指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>通过回车寻找上传大文件前的最后一个版本（可以根据时间找；也可以是更早的版本），复制这一版本对应<code>commit</code>后方的版本号。</p><p>假定命令行有输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">commit 6657f1c73af4254557e77c3dd2c681ddf10e5d51 (HEAD -&gt; master)</span><br><span class="line">Author: K-PK66 &lt;example@example.com&gt;</span><br><span class="line">Date:   Mon Jun 3 12:26:51 2024 +0800</span><br><span class="line"></span><br><span class="line">    Site updated: 2024-06-03 12:26:49</span><br><span class="line"></span><br><span class="line">commit 35a21f2e94c5022503cfbce29ff2dacf2b497cd2</span><br><span class="line">Author: K-PK66 &lt;example@example.com&gt;</span><br><span class="line">Date:   Mon Jun 3 01:28:30 2024 +0800</span><br><span class="line"></span><br><span class="line">    Site updated: 2024-06-03 01:28:30</span><br></pre></td></tr></table></figure><p>想要恢复至2024年6月3日东八区时间1时28分30秒的版本，则需要用指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset 35a21f2e94c5022503cfbce29ff2dacf2b497cd2</span><br></pre></td></tr></table></figure><p>将<code>.deploy_git</code>恢复至当时。然后再进行推送即可恢复正常。</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>通过在主题文件夹中的<code>source</code>文件夹中新建<code>fonts</code>文件夹，并向其中放入字体<code>ttf</code>（或<code>otf</code>，<code>woff</code>等）扩展名的字体文件。随后在主题文件夹中<code>css</code>文件夹新建<code>css</code>文件并向其中引入该字体。</p><p>以向本博客引入字体“A-OTF Shin Go Pro Regular”，并将其命名为“A-OTF Shin Go Pro R”为例。将名为<code>AOTFShinGoProRegular.woff</code>的字体文件放入<code>fonts</code>文件夹，随后在<code>css</code>文件夹中新建<code>my.css</code>并编写如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;A-OTF Shin Go Pro R&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&#x27;A-OTF Shin Go Pro R&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;../fonts/AOTFShinGoProRegular.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;A-OTF Shin Go Pro R&#x27;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在主题<code>_config.yml</code>文件中指定板块写如下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/my.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">  <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>即可。</p><p>特别地，如果仅想对特定的字母&#x2F;符号使用该字体，可使用在线字体提取工具（例如<a href="https://font-subset.disidu.com/">这个工具</a>）对指定字符的该字体进行提取并重新包装为新字体文件，按上述方法安装。</p><h3 id="上传过程中遭遇卡顿（仅限中国大陆地区）"><a href="#上传过程中遭遇卡顿（仅限中国大陆地区）" class="headerlink" title="上传过程中遭遇卡顿（仅限中国大陆地区）"></a>上传过程中遭遇卡顿（仅限中国大陆地区）</h3><p>由于GitHub在中国大陆地区的访问过程中已经收到严重的DNS污染，不可避免地会出现在使用上传博客指令后无法连接GitHub服务器（或上传过程中断开连接）的情况。针对此可灵活使用中国大陆访问较快的Gitee进行操作。</p><blockquote>由于Gitee Pages在2022年左右起已经停止服务，所以此处不推荐直接在Gitee上建立仓库的手段。</blockquote><p>首先建立一个Gitee账号并创建仓库。之后在该仓库“管理&#x2F;仓库镜像管理”中设置GitHub的仓库作为Gitee仓库的镜像，并设置方向为由Gitee仓库Push到GitHub仓库。随后在GitHub个人设置中使用先前“<a href="#GitHub%E7%9A%84%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">GitHub的身份验证</a>”章节提到的方法生成权限密钥之后在指定位置输入；在完成添加镜像后，将<code>_config.yml</code>指定位置修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="comment">#- type: git</span></span><br><span class="line">  <span class="comment">#  repo: https://github.com/k-pk66/k-pk66.github.io.git</span></span><br><span class="line">  <span class="comment">#  branch: master</span></span><br><span class="line">  - <span class="built_in">type</span>: git</span><br><span class="line">    repo: git@gitee.com:k-pk66/blog.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>再输入博客上传指令，命令行将会在Gitee的仓库中更新博客；而仓库更新后会自动将更改写入GitHub。这时可以明显感觉到上传的速度增快了。</p>]]></content>
      
      
      <categories>
          
          <category> Configuration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #环境配置# </tag>
            
            <tag> #命令行# </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
